
                                       ----------
                                      |  Printf  |
                                       ----------       

                _________________________________________________________________

                                    Plan de bataille
                _________________________________________________________________


1/ Lire et relire et relire la doc.

2/ Mumuse avec les va_lst

3/ Choix de la structure pour contenir tous les flags.

4/ Parsing du format. Stockage dans la structure au fur et a mesure.

5/ Pendant le parsing, convertir les %. Sassurer du cas %%

6/ Recuperer tous les flags, precision, width pour une conversion. Check si valide

7/ Soccuper du padding.

8/ Faire toutes les conversions.

9/ Sassure du formatage de la conversion.

10/ Recommencer jusqu'a buffer full ou fin printf. Imprimer le buffer dan les deux cas.

                _________________________________________________________________

                                    Caractere d'attribut (6 mand, 4 bonus)
                _________________________________________________________________

'xxx'--> % 10 d             Largeur de champ minimum. Justifie a droite par defaut
                            Pas de troncature, le champ est minore, pas majore
                            Une largeur negative -> '-' puis valeur positive.

'#'  --> % # o              Notation octale commence par 0  
     --> % # x / X          Notation hexa commence par 0x / X
     --> % # aA eE fF gG    Notation decimal avec toujours un '.', 
                            pour gG pas de suppression des 0 en tete

'0'  --> %0d                Si width defini, precede avec des 0 a gauche. 
                            '-' et la precision pour les entiers override '0'

'-'  -->                    Justifie a gauche. Annule '0'

'+'  -->                    '+' avant les nombres positifs signes. Annule ' '

' '  -->                    Un espace avant les nombres positifs signes et les chaines vides. 
                            Annulee par '+'

'.'  -->                    Precision. 0 ou juste '.' == nulle.
                            Pour entier (d i o u x X) nombre minimum de chiffre
                            Pour flottant (a A e E f F) nombres de chiffres apres la virgule
                            Pour g et G, nombres maximums de chiffres apres la vigule
                            Pour les strings (s S) nombres de caracteres maxs.
                                    ----------------------------
'$'  --> % m $ , .., m      Permet de choisir le m-ieme argument. Commence a 1

'%%' -->                    Affiche "%"

/'/  -->                    Groupe les nombres par milliers (1 000 000 000)

'*'  --> % *.* d , 5, 2, n  Largeur de champ ou precision, remplace par le prochain argument de va_lst
                            Doit etre un int
                                     ----------------------------   
                                            lenght modifier (6 mand)
///////////////////////////////////////////////////////////////////////////////////////////////////////
'l'  -->                    Pour les conversions d i o u x, l'argument est un long, pas un int
'll' -->                    Pour les conversions d i o u x, l'argument est un long long, pas un int
'L'  -->                    Pour les conversions e f g G, l'argument est un long double
'j'  -->                    Argument suivant intmax_t ou uintmax_t
'z'  -->                    Argument suivant size_t ou ssize_t
'h'  -->                    Valeur affiche tel un short ou unsigned short
/////////////////////////////////////////////////////////////////////////////////////////////////////////

                _________________________________________________________________

                                            Conversions (8 mand, 8 bonus)
                _________________________________________________________________

's' -->                     Argument converti en const char *. Si precision = n, ecrire n caracteres. ====> FAIT
                            Si 'ls', string en unicode

'S' -->                     Cf 'ls'

'p' -->                     Argument pointeur type void *, affichage en hexa (%#X)

'd' -->                     Argument int converti en chiffre decimal signe.
                            Precision == nombre minimal de chiffres. par defaut 1. si prec 0 et n = 0, sortie vide

'D' -->                     Same as 'd'            

'i' -->                     Same as 'd'

'o' -->                     Chiffe octal non signe. 0 converti avec precision de 0 --> sortie vide

'O' -->                     Same as 'o'

'u' -->                     Chiffre decimal non signe. 0 converti avec precision de 0 --> sortie vide

'U' -->                     Same as 'u'

'x' -->                     Chiffre hexadecimal non signe. utilise abcdef. 0 converti avec precision de 0 --> sortie vide

'X' -->                     Chiffre hexadecimal non signe. utilise ABCDEF. 0 converti avec precision de 0 --> sortie vide

'c' -->                     L'argument de type int est converti en unsigned char et le caractere correspondant est affiche
                            Si 'lc', unicode.

'C' -->                     Cf 'lc'
                                       ---------------------------------
'e' -->                     Argument reel converti en type double. Affichage du type x,000000eyz. Par defaut, precision = 6.
                            Si precision = 0, pas de point. Precision = nombres de chiffres apres la virgule.

'E' -->                     Same as 'e' with x,000000Eyz.

'g' -->                     Argument reel converti en type double. Affichage du type x,000000. Par defaut, precision = 6.
                            Si precision = 0, pas de point. Precision = nombres de chiffres apres la virgule.

'G' -->                     Same as 'g'.

'a' -->                     Argument reel note en hexa.

'A' -->                     Same as 'a' zith caps.

'n' -->                     Pas d'ecriture. Le nombre de caractere ecrit atm stored in %n.     

'b' -->                     Int en binaire.

____________________________________________________________________________________________________________________________________________________


 Mettre en place le projet : Headers, dossiers, Makefile etc.. 
S'occuper du parseur, 
commencer quelques conversions.
``~